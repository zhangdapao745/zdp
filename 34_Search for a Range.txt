34. Search for a Range

Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].


solution:
class Solution {
    public int[] searchRange(int[] nums, int target) {
		int l = 0;
		int r = nums.length;
		int middle = (l + r) /2;
		int ll = -1;
		
		while(l<r){
			if(nums[middle] == target){
				ll = middle;
				r = middle;
			}else if(nums[middle] > target){
				r = middle;
			}else {
				l = middle + 1;
			}
			middle = (l+r)/2;
		}
		
		int[] result = {-1,-1};
		if(ll == -1 ){
			return result;
		}else {
			result[0] = ll;
			
			l = 0;
			r = nums.length;
			int rr = -1;
			while(l < r){
				if(nums[middle] == target){
					rr = middle;
					l = middle + 1;
				}else if(nums[middle] > target){
					r = middle;
				}else {
					l = middle + 1;
				}
				middle = (l+r)/2;
			}
			result[1] = rr;
			return result;
		}
	}
}