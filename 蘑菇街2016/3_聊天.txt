A和B是好友，他们经常在空闲时间聊天，A的空闲时间为[a1 ,b1 ],[a2 ,b2 ]..[ap ,bp ]。B的空闲时间是[c1 +t,d1 +t]..[cq +t,dq +t],这里t为B的起床时间。这些时间包括了边界点。B的起床时间为[l,r]的一个时刻。若一个起床时间能使两人在任一时刻聊天，那么这个时间就是合适的，问有多少个合适的起床时间？

思路：
循环判断t=[l,r]中任意整数时，是否存在ab有相同时间的。
判断条件为a<=d+t&&b>=c+t。（a，b无相同时间条件为a>d+t||b<c+t，反推）

solution:
import java.util.Scanner;
  
public class Main {
  
    static int p;
    static int q;
    static int l;
    static int r;
    static int[][] space;
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNext()) {
            p = scanner.nextInt();
            q = scanner.nextInt();
            l = scanner.nextInt();
            r = scanner.nextInt();
              
            space = new int[p+q][2];
            for(int i = 0; i<p;i++){
                space[i][0] = scanner.nextInt();
                space[i][1] = scanner.nextInt();
            }
            for(int i = 0;i<q;i++){
                space[i+p][0] = scanner.nextInt();
                space[i+p][1] = scanner.nextInt();
            }
              
            int res = 0;
            for(int t = l; t <=r;t++){
                if(judgeT(t)){
                    res++;
                }
            }
            System.out.println(res);
        }
    }
      
    public static boolean judgeT(int t){
        for(int i = 0;i<p;i++){
            for(int j =p;j<p+q;j++){
                if(space[j][0]+t <= space[i][1] && space[j][1]+t >= space[i][1])
                    return true;
                if(space[j][0]+t <= space[i][0] && space[j][1]+t >= space[i][0])
                    return true;
            }
        }
        return false;
    }
}