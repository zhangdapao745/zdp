Scanner scanner = new Scanner(System.in);
while(scanner.hasNext()){
	String string1 = scanner.nextLine();
	String string2 = new StringBuffer(string1).reverse().toString();
	char cs1[] = string1.toCharArray();
	char cs2[] = string2.toCharArray();
	
	int dp[][] = new int[string1.length()+1][string1.length()+1];
	
	for(int i = 0; i < string1.length()+1;i++){
		dp[i][0] = 0;
		dp[0][i] = 0;
	}
	
	for(int i = 1; i < string1.length()+1; i++){
		for(int j = 1; j < string1.length()+1; j++){
			if(cs1[i-1] == cs2[j-1]){//dp[i][j]代表第一个串的前i-1 与另一个字符串的前j-1最大的公共子序列
				dp[i][j] = dp[i-1][j-1]+1;
			}else {
				dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
			}
		}
	}
	System.out.println(string1.length() - dp[string1.length()][string1.length()]);
}