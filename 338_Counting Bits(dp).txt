Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example:
For num = 5 you should return [0,1,1,2,1,2].

Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.

思路：
dp[n] = dp[m] + dp[n-m]
m为小于n的最大2的幂级数 且dp[m] = 1
如：5 = 4 + 1
 1000
+0001
 1001
扫描一遍即可 o(n)
 
solution:
class Solution {
    public int[] countBits(int num) {
        int[] res = new int[num+1];
        
        if(num==0){
        	
        }else if(num ==1){
        	res[1] = 1;
        }else {
        	res[1] = 1;
			int i = 2;
			int b = 1;
			while(i<=num){
				if(i<2*b){
					res[i] = res[b] + res[i-b];
				}else {
					res[i]=1;
					b*=2;
				}
				i++;
			}
		}
     
        return res;
    }
}